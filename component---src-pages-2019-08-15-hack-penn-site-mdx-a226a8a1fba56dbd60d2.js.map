{"version":3,"sources":["webpack://@goldenglorys/notebook/./src/pages/2019-08-15_hack_penn_site.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAOaA,EAAe,GACtBC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,QALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAC5E,6CACA,uLAAyK,aAAGC,WAAW,IACnL,KAAQ,yBACP,kBAAQA,WAAW,KAAnB,mBACL,wCACA,gHACA,mBACE,cAAIA,WAAW,MAAf,6DAAiF,aAAGA,WAAW,KAC3F,KAAQ,uBADqE,yBAGjF,cAAIA,WAAW,MAAf,yHAA6I,aAAGA,WAAW,KACvJ,KAAQ,sBADiI,wBAG7I,cAAIA,WAAW,MAAf,qEAAyF,aAAGA,WAAW,KACnG,KAAQ,yBAD6E,2BAGzF,cAAIA,WAAW,MAAf,sFAA0G,sBAAYA,WAAW,MAAvB,YAA1G,kBAAiL,aAAGA,WAAW,KAC3L,KAAQ,yBADqK,2BAGjL,cAAIA,WAAW,MAAf,8EAAkG,aAAGA,WAAW,KAC5G,KAAQ,uBADsF,yBAGlG,cAAIA,WAAW,MAAf,4RAEF,qNACA,+CACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,uEAUL,8DACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,uLAgBL,yBAAW,sBAAYA,WAAW,KAAvB,OAAX,0DAAoH,sBAAYA,WAAW,KAAvB,SAApH,mBAAwL,aAAGA,WAAW,IAClM,KAAQ,mCAD4K,SAAxL,gCAEkD,aAAGA,WAAW,IAC5D,KAAQ,gCADsC,QAErC,sBAAYA,WAAW,KAAvB,MAFqC,SAFlD,kCAI0G,sBAAYA,WAAW,KAAvB,cAJ1G,+CAI+M,sBAAYA,WAAW,KAAvB,UAJ/M,6CAI8S,sBAAYA,WAAW,KAAvB,YAJ9S,MAKA,yBAAW,sBAAYA,WAAW,KAAvB,WAAX,iBAA+E,sBAAYA,WAAW,KAAvB,QAA/E,2OAA0W,sBAAYA,WAAW,KAAvB,SAA1W,OAAka,sBAAYA,WAAW,KAAvB,MAAla,gBAAge,sBAAYA,WAAW,KAAvB,MAAhe,8GACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,2VAsBL,oCAAsB,aAAGA,WAAW,IAChC,KAAQ,6BADU,iBAAtB,mCAE6D,aAAGA,WAAW,IACvE,KAAQ,sBADiD,WAF7D,+LAImN,aAAGA,WAAW,IAC7N,KAAQ,+BADuM,2BAJnN,WAM+C,sBAAYA,WAAW,KAAvB,MAN/C,OAMoG,sBAAYA,WAAW,KAAvB,MANpG,8KAMgU,sBAAYA,WAAW,KAAvB,MANhU,UAMwX,aAAGA,WAAW,IAClY,KAAQ,eAD4W,aANxX,4BAQkD,cAAIA,WAAW,KAAf,kCAClD,iLACA,8CACA,kDAAoC,aAAGA,WAAW,IAC9C,KAAQ,sBADwB,UAApC,8CAEiE,aAAGA,WAAW,IAC3E,KAAQ,gCADqD,kCAGjE,iHAAmG,aAAGA,WAAW,IAC7G,KAAQ,gDADuF,kDAGnG,0FAA4E,aAAGA,WAAW,IACtF,KAAQ,0HADgE,mBAA5E,uCAGA,gGAAkF,aAAGA,WAAW,IAC5F,KAAQ,mDADsE,0BAAlF,MAGA,oBACA,mDAAqC,aAAGA,WAAW,IAC/C,KAAQ,+BADyB,0BAOzCJ,EAAWK,gBAAiB","file":"component---src-pages-2019-08-15-hack-penn-site-mdx-a226a8a1fba56dbd60d2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Hack Pennsylvania site`}</h1>\n    <p>{`Though the event ran last January, Hack Pennsylvania is one of the things I'm most proud of. I wanted there to be a nice recap of the event online, so I made it: `}<a parentName=\"p\" {...{\n        \"href\": \"https://hackpenn.com\"\n      }}><strong parentName=\"a\">{`hackpenn.com`}</strong></a></p>\n    <h2>{`Behind the scenes`}</h2>\n    <p>{`The site is built using Next.js + MDX + Theme UI, with Rebass + Emotion. Breaking it down:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Next.js is the framework that bundles & serves the site. `}<a parentName=\"li\" {...{\n          \"href\": \"https://nextjs.org/\"\n        }}>{`https://nextjs.org/`}</a></li>\n      <li parentName=\"ul\">{`MDX is a technology for Markdown <-> React. It lets you use React components directly inside Markdown, & vice versa. `}<a parentName=\"li\" {...{\n          \"href\": \"https://mdxjs.com/\"\n        }}>{`https://mdxjs.com/`}</a></li>\n      <li parentName=\"ul\">{`Theme UI is a new React library for making themeable React apps. `}<a parentName=\"li\" {...{\n          \"href\": \"https://theme-ui.com/\"\n        }}>{`https://theme-ui.com/`}</a></li>\n      <li parentName=\"ul\">{`Rebass is a React component library wrapping Theme UI. It exposes components like `}<inlineCode parentName=\"li\">{`<Text />`}</inlineCode>{` for styling. `}<a parentName=\"li\" {...{\n          \"href\": \"https://rebassjs.org/\"\n        }}>{`https://rebassjs.org/`}</a></li>\n      <li parentName=\"ul\">{`Emotion is the \"backend\" of rendering the CSS-in-JS from Theme UI/Rebass. `}<a parentName=\"li\" {...{\n          \"href\": \"https://emotion.sh/\"\n        }}>{`https://emotion.sh/`}</a></li>\n      <li parentName=\"ul\">{`The site is deployed on Netlify. Since the site has no dynamic content, it can be statically exported, so Netlify generates a folder of HTML & JS files when I push to GitHub it's then serving via CDN. Next.js automatically detects static vs dynamic pages & builds appropriately.`}</li>\n    </ul>\n    <p>{`So all the content of the site is written in standard Markdown, with a sprinkling of React components wrapping parts of the site like the top banner, grid of people, etc with special styling.`}</p>\n    <p>{`Here’s an example of MDX:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdx\"\n      }}>{`<Banner>\n\n# Hack Pennsylvania\n\nWrite text here\n\n</Banner>\n`}</code></pre>\n    <p>{`Then in a JS file, define the component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const Banner = props => (\n  <Box\n    {...props}\n    sx={{\n      h1: {\n        color: 'primary'\n      },\n      p: {\n        fontFamily: 'mono'\n      }\n    }}\n  />\n)\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component is coming from Rebass—it's actually just a `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` with Theme UI `}<a parentName=\"p\" {...{\n        \"href\": \"https://theme-ui.com/jsx-pragma\"\n      }}>{`magic`}</a>{` applied. Everything inside `}<a parentName=\"p\" {...{\n        \"href\": \"https://theme-ui.com/sx-prop\"\n      }}>{`the `}<inlineCode parentName=\"a\">{`sx`}</inlineCode>{` prop`}</a>{` is running via Theme UI. The `}<inlineCode parentName=\"p\">{`{...props}`}</inlineCode>{` forwards on all the other props passed to `}<inlineCode parentName=\"p\">{`Banner`}</inlineCode>{`—which include the Markdown content, via `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{` color & the `}<inlineCode parentName=\"p\">{`mono`}</inlineCode>{` font family are coming from a global theme. You can define multiple color modes, like the dark theme, & use a React Hook on any component to get the current colors based on the color mode or control the current mode. When you use `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`bg`}</inlineCode>{` inside the `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop, Theme UI automatically applies the correct color for the mode. A basic theme could look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  fonts: {\n    body: 'system-ui, sans-serif',\n    mono: 'Menlo, monospace'\n  },\n  initialColorMode: 'light',\n  colors: {\n    text: '#123',\n    background: '#fff',\n    primary: '#f03',\n    modes: {\n      dark: {\n        text: '#fff',\n        background: '#000',\n        primary: '#0ef'\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`If you've used `}<a parentName=\"p\" {...{\n        \"href\": \"https://styled-system.com\"\n      }}>{`Styled System`}</a>{` before (also by the brilliant `}<a parentName=\"p\" {...{\n        \"href\": \"https://jxnblk.com\"\n      }}>{`@jxnblk`}</a>{`), you're familiar with the idea of themes & scales for whitespace, color, etc. Theme UI takes that to the next level by allowing props you're used to from Styled System (included in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://design.hackclub.com\"\n      }}>{`Hack Club Design System`}</a>{`) like `}<inlineCode parentName=\"p\">{`py`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`bg`}</inlineCode>{` right alongside full CSS-in-JS, with full support for psuedoselectors, complex selectors, nesting, & more, via Emotion. I wrote some rambling thoughts on Theme UI & the `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop `}<a parentName=\"p\" {...{\n        \"href\": \"/2019-08-14\"\n      }}>{`yesterday`}</a>{`, if you're interested. `}<em parentName=\"p\">{`TLDR, Theme UI is brilliant.`}</em></p>\n    <p>{`(This isn't a great explanation & there's a lot more to Theme UI than this. If you'd be interested in more writing from me on using Theme UI, let me know!)`}</p>\n    <h2>{`The goods are on Glitch`}</h2>\n    <p>{`I developed the site 100% on `}<a parentName=\"p\" {...{\n        \"href\": \"https://glitch.com\"\n      }}>{`Glitch`}</a>{`, without setting it up locally. Big fan. `}<a parentName=\"p\" {...{\n        \"href\": \"https://glitch.com/~hackpenn\"\n      }}>{`https://glitch.com/~hackpenn`}</a></p>\n    <p>{`If you want to set up a site with the same basic tech stack, remix my starter project here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://glitch.com/~next-mdx-rebass-theme-ui\"\n      }}>{`https://glitch.com/~next-mdx-rebass-theme-ui`}</a></p>\n    <p>{`If you want to see all the code for the site in one place, check out `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/hackpenn/site/commit/5f55ae915a6e4762d8e2641383000f5770960e49#diff-63823233e264ed6abbcc6f7ea0ef10bd\"\n      }}>{`this file first`}</a>{`, then scroll up through the rest.`}</p>\n    <p>{`If you want to see more projects from Hack Pennsylvania, I've put a few in `}<a parentName=\"p\" {...{\n        \"href\": \"https://glitch.com/@lachlanjc/hack-pennsylvania\"\n      }}>{`a Collection on Glitch`}</a>{`.`}</p>\n    <hr></hr>\n    <p>{`Questions/feedback? Email me: `}<a parentName=\"p\" {...{\n        \"href\": \"mailto:lachlan@hackpenn.com\"\n      }}>{`lachlan@hackpenn.com`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}