{"version":3,"sources":["webpack://@goldenglorys/notebook/./src/pages/2019-11-05_custom_social_card_services.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","as","href","sx","mr","isMDXComponent"],"mappings":"iQAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,QALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,wDACA,mOAAqN,aAAGC,WAAW,IAC/N,KAAQ,4DADyM,4BAArN,sBAGA,kEAAoD,aAAGA,WAAW,IAC9D,KAAQ,2DADwC,uBAApD,8CAE8E,aAAGA,WAAW,IACxF,KAAQ,sCADkE,YAF9E,yBAI8C,aAAGA,WAAW,IACxD,KAAQ,yCADkC,8BAJ9C,kIAOA,uFAAyE,aAAGA,WAAW,IACnF,KAAQ,6BAD6D,YAAzE,MAGA,kBAAG,eAAKA,WAAW,IACf,IAAO,qFACP,IAAO,0EAEX,8EACA,QAAC,KAAD,CAAQC,GAAG,IAAIC,KAAK,0CAA0CC,GAAI,CAChEC,GAAI,GACHL,QAAQ,UAFX,kBAKA,QAAC,KAAD,CAAQE,GAAG,IAAIC,KAAK,qCAAqCH,QAAQ,UAAjE,aAGA,8EAAgE,aAAGC,WAAW,IAC1E,KAAQ,oBADoD,YAAhE,gJAEqK,aAAGA,WAAW,IAC/K,KAAQ,uCADyJ,QAFrK,gCAIiD,aAAGA,WAAW,IAC3D,KAAQ,wEADqC,wBAJjD,MAOA,iCACA,mBACE,cAAIA,WAAW,MAAf,cAAkC,sBAAYA,WAAW,MAAvB,WAAlC,uDACA,cAAIA,WAAW,MAAf,8CACA,cAAIA,WAAW,MAAf,gIACA,cAAIA,WAAW,MAAf,kEAEF,4CACA,QAAC,KAAD,CAAQC,GAAG,IAAIC,KAAK,8CAA8CC,GAAI,CACpEC,GAAI,GACHL,QAAQ,UAFX,oBAKA,QAAC,KAAD,CAAQE,GAAG,IAAIC,KAAK,yCAAyCH,QAAQ,UAArE,eAGA,0HAA4G,aAAGC,WAAW,IACtH,KAAQ,gDACP,sBAAYA,WAAW,KAAvB,mBAFL,MAEyE,sBAAYA,WAAW,KAAvB,SAFzE,MAEgI,sBAAYA,WAAW,KAAvB,WAFhI,yBAE4M,aAAGA,WAAW,IACtN,KAAQ,+EACP,sBAAYA,WAAW,KAAvB,yBAJL,8FAIuK,sBAAYA,WAAW,KAAvB,OAJvK,2BAKA,qMAAuL,aAAGA,WAAW,IACjM,KAAQ,8GAD2K,eAAvL,gFAEwG,aAAGA,WAAW,IAClH,KAAQ,oDACP,sBAAYA,WAAW,KAAvB,QAFmG,cAFxG,kBAIyF,aAAGA,WAAW,IACnG,KAAQ,uGACP,sBAAYA,WAAW,KAAvB,gBAFoF,8BAJzF,MAOA,2GAA6F,aAAGA,WAAW,IACvG,KAAQ,kIADiF,mCAA7F,qEAGA,6KAA+J,aAAGA,WAAW,IACzK,KAAQ,yCADmJ,SAA/J,wGAGA,kJAKJJ,EAAWS,gBAAiB","file":"component---src-pages-2019-11-05-custom-social-card-services-mdx-de5396cce6a1fac196ca.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Button } from 'theme-ui';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Custom social card image services`}</h1>\n    <p>{`Open Graph images are the image you sometimes see when sharing a link on iMessage, Slack, Twitter, etc. Though they can be any normal image, I first saw the idea of dynamically generating Open Graph images `}<a parentName=\"p\" {...{\n        \"href\": \"https://levels.io/phantomjs-social-media-share-pictures/\"\n      }}>{`from @levelsio/NomadList`}</a>{` a few years ago.`}</p>\n    <p>{`Earlier this year, the indomitable ZEIT team `}<a parentName=\"p\" {...{\n        \"href\": \"https://zeit.co/blog/social-og-image-cards-as-a-service\"\n      }}>{`built a web service`}</a>{` for their own site’s social cards called `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/vercel/og-image\"\n      }}>{`og-image`}</a>{`, which I forked for `}<a parentName=\"p\" {...{\n        \"href\": \"https://hackclub-workshopcards.now.sh\"\n      }}>{`Hack Club’s Workshop Cards`}</a>{`. Since then, they’ve rewritten the system to be simpler to run & deploy, so I used their latest version for my new projects.`}</p>\n    <p>{`I’ve now created custom cards for all pages on both Notebook & my `}<a parentName=\"p\" {...{\n        \"href\": \"https://ima.lachlanjc.com\"\n      }}>{`IMA blog`}</a>{`:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://cloud-1tm0gjs2w.vercel.app/2021-01-13_8n9y3u809epu1r9qgdf2nh1xddz5vkgk.png\",\n        \"alt\": \"Examples of my new social cards, composited with Photoshop for iPad\"\n      }}></img></p>\n    <p>{`If you want to play with the systems, try them out here:`}</p>\n    <Button as=\"a\" href=\"https://notebook-cards.lachlanjc.now.sh\" sx={{\n      mr: 2\n    }} mdxType=\"Button\">\n  Notebook demo\n    </Button>\n    <Button as=\"a\" href=\"https://ima-cards.lachlanjc.now.sh\" mdxType=\"Button\">\n  IMA demo\n    </Button>\n    <p>{`Under the hood, a serverless Node.js function (hosted on `}<a parentName=\"p\" {...{\n        \"href\": \"https://zeit.co/\"\n      }}>{`ZEIT Now`}</a>{`, of course) spins up a Puppeteer instance to render a webpage to an image file. The backend is written in TypeScript and the frontend uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/wavesoft/dot-dom\"\n      }}>{`.dom`}</a>{`. If you want to read more, `}<a parentName=\"p\" {...{\n        \"href\": \"https://zeit.co/blog/social-og-image-cards-as-a-service#how-it-works\"\n      }}>{`ZEIT has you covered`}</a>{`.`}</p>\n    <p>{`My changes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`I added a `}<inlineCode parentName=\"li\">{`caption`}</inlineCode>{` field, for displaying the course name and/or date`}</li>\n      <li parentName=\"ul\">{`I removed the default images (ZEIT logos)`}</li>\n      <li parentName=\"ul\">{`I edited the frontend, removing their image presets and custom width/height functionality and updating the style/typography`}</li>\n      <li parentName=\"ul\">{`I remade the final card template (primarily static HTML/CSS)`}</li>\n    </ul>\n    <p>{`View the final source:`}</p>\n    <Button as=\"a\" href=\"https://github.com/lachlanjc/notebook-cards\" sx={{\n      mr: 2\n    }} mdxType=\"Button\">\n  Notebook source\n    </Button>\n    <Button as=\"a\" href=\"https://github.com/lachlanjc/ima-cards\" mdxType=\"Button\">\n  IMA source\n    </Button>\n    <p>{`If you’re looking to create your own, similar service for your own website/blog, I recommend forking `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/lachlanjc/notebook-cards\"\n      }}><inlineCode parentName=\"a\">{`notebook-cards`}</inlineCode></a>{`. `}<inlineCode parentName=\"p\">{`npm i`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`now dev`}</inlineCode>{`, then jump into the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/lachlanjc/notebook-cards/blob/main/api/_lib/template.ts\"\n      }}><inlineCode parentName=\"a\">{`api/_lib/template.ts`}</inlineCode></a>{` file to edit the template with your own content/styling. When it’s done, just deploy via `}<inlineCode parentName=\"p\">{`now`}</inlineCode>{` & you’re ready to go!`}</p>\n    <p>{`You’ll then need to add the meta tags to links to your card service. This depends significantly on your site’s tech stack, but if you’re using React, I highly recommend making `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/lachlanjc/notebook/blob/345afbf4b512e5d5f4c66a15fab1d1be8ce46297/src/components/meta.js\"\n      }}>{`a component`}</a>{` to wrap all the necessary tags. If you’re using Next.js, you’ll need their `}<a parentName=\"p\" {...{\n        \"href\": \"https://nextjs.org/docs/api-reference/next/head\"\n      }}><inlineCode parentName=\"a\">{`Head`}</inlineCode>{` component`}</a>{`, for Gatsby, `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.org/docs/add-page-metadata/#using-react-helmet-and-gatsby-plugin-react-helmet\"\n      }}><inlineCode parentName=\"a\">{`react-helmet`}</inlineCode>{` and its associated plugin`}</a>{`.`}</p>\n    <p>{`(On Notebook, I use a completely-ridiculous method of storing post names in slugs, so `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/lachlanjc/notebook/commit/345afbf4b512e5d5f4c66a15fab1d1be8ce46297#diff-34a6d62af0cf0b784f8444529f3130efR42\"\n      }}>{`the way I generate the metadata`}</a>{` is confusing and not recommendable, but it works great for me.)`}</p>\n    <p>{`One nice touch is that the service supports a dark mode, which you can automatically use for special posts. On Notebook, that’s my non-dated pages like `}<a parentName=\"p\" {...{\n        \"href\": \"https://notebook.lachlanjc.com/tools/\"\n      }}>{`Tools`}</a>{`, and on IMA, I made midterm & final projects use dark mode. If you never touch it, that works too.`}</p>\n    <p>{`Those are my systems, remixed from ZEIT’s & now open source for you to remix too. If you make your own version, let me know!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}