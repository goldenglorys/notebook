{"version":3,"sources":["webpack://@goldenglorys/notebook/./src/pages/2019-09-06_explaining_next_mdx_theme_ui.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-2019-09-06-explaining-next-mdx-theme-ui-mdx-cb75175c4ec3aceeb017.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { LinkList } from '../components/blocks';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Tech explainer: Next.js, MDX, Theme UI`}</h1>\n    <p>{`I’ve recently built a number of sites using a new tech stack, where pages are written in Markdown with embedded React components & theme-able (e.g. dark/light modes) styling.`}</p>\n    <LinkList mdxType=\"LinkList\">\n      <ul>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://hackpenn.com\"\n          }}>{`Hack Pennsylvania recap`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://lachlanjc.me\"\n          }}>{`Personal site`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://angelhacks.org\"\n          }}>{`AngelHacks site`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://windy-2019-recap.netlify.com\"\n          }}>{`Windy City Hacks recap`}</a></li>\n      </ul>\n    </LinkList>\n    <p>{`I’ve written this explainer for the React user who’s a beginner to the world of CSS-in-JS, MDX, etc.`}</p>\n    <p><em parentName=\"p\">{`Note: the following is extracted from `}<a parentName=\"em\" {...{\n          \"href\": \"https://notebook.lachlanjc.me/2019-09-06_making_a_hackathon_site/\"\n        }}>{`my tutorial on building a hackathon website`}</a>{`.`}</em></p>\n    <h2>{`Three pillars of our tech stack`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`We’re using the `}<a parentName=\"li\" {...{\n          \"href\": \"https://nextjs.org/\"\n        }}>{`Next.js`}</a>{` framework. React is just a library you can run on a webpage—Next makes it easy to build a full, multi-page site (either with dynamic server components or a static site, like these are), handling asset bundling, routing, etc.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Next is wildly easy to get started with, & once you’ve got a site, you can add a new page just by making a file at `}<inlineCode parentName=\"li\">{`pages/about.mdx`}</inlineCode>{` with some text in it, & you now have a high-performance static page at `}<inlineCode parentName=\"li\">{`/about`}</inlineCode>{` on your site. This is `}<em parentName=\"li\">{`magical`}</em>{`.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`We’re using `}<a parentName=\"li\" {...{\n          \"href\": \"https://mdxjs.com\"\n        }}>{`MDX`}</a>{` to write content. It’s Markdown with superpowers: all the normal Markdown stuff works, but then you can also embed React components inside your text (great for styling, adding forms, etc!), or include other MDX files as React components `}<em parentName=\"li\">{`in other MDX files`}</em>{`. It makes authoring pages super easy, because suddenly you only have to write code if you want custom styling on your page, not just to get text on the screen.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://theme-ui.com\"\n        }}>{`Theme UI`}</a>{` handles styling, with `}<a parentName=\"li\" {...{\n          \"href\": \"https://emotion.sh\"\n        }}>{`Emotion`}</a>{` underneath & `}<a parentName=\"li\" {...{\n          \"href\": \"https://rebassjs.org\"\n        }}>{`Rebass`}</a>{` on top. Breaking this down: Emotion handles dynamically generating the actual CSS based on which components are on each page. Theme UI is the library that lets you use themes (e.g. dark & light modes) & provides a really nice API for styling React/MDX components. Rebass is a library on top with pre-made Theme UI components, for using CSS Flexbox, or adding buttons or form elements with basic styling applied.`}</li>\n    </ol>\n    <p>{`The site is then hosted on `}<a parentName=\"p\" {...{\n        \"href\": \"https://netlify.com\"\n      }}>{`Netlify`}</a>{`, because it’s free, easy to set up, automatically deploys whenever you push to GitHub, & `}<em parentName=\"p\">{`just works`}</em>{` (most of the time).`}</p>\n    <h2>{`Looking at a codebase`}</h2>\n    <p>{`Check out the Hack Pennsylvania recap site codebase, open source & under the MIT License: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/hackpenn/site\"\n      }}><strong parentName=\"a\">{`github.com/hackpenn/site`}</strong></a></p>\n    <p>{`The two important folders are `}<inlineCode parentName=\"p\">{`pages`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{`—that’s where you’ll spend the vast majority of your time editing the site. Pages are written in MDX (or JSX), components in JSX (React components).`}</p>\n    <h3>{`Styling`}</h3>\n    <p>{`How styling works is a bit complex, but once you wrap your head around the system, it’s incredibly fast to work with.`}</p>\n    <p>{`It starts with a theme. The theme keeps all the primary “components” of your design—all the colors & fonts, but also the amounts of spacing (margin/padding in CSS), the font sizes used, the box-shadows used, etc, all in one place. By not having colors & font sizes & friends all spread out through your codebase, you can super easily modify the look of your whole site just by changing the theme, & you’ll also have fantastic consistency in your design, because you won’t have a random colors used in just one place or the like.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Themes also open up having a light mode & a dark mode—or even more craziness :) The default `}<inlineCode parentName=\"li\">{`colors`}</inlineCode>{` set is the light mode, then when the dark mode is in use, the colors dynamically change to what you’ve defined in the theme.`}</li>\n      <li parentName=\"ul\">{`You should almost never find yourself manually setting a font size or color on pages/components of the site—keep everything in your theme. Keep reading to see how to use values defined in your theme…`}</li>\n    </ul>\n    <p>{`You won’t be writing direct CSS anywhere on the site. You’ll instead see `}<inlineCode parentName=\"p\">{`sx={{`}</inlineCode>{` on the components & on the pages. A quick guide to what goes inside the `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`When you write `}<inlineCode parentName=\"li\">{`fontSize: 3`}</inlineCode>{` inside `}<inlineCode parentName=\"li\">{`sx={{ … }}`}</inlineCode>{`, you `}<em parentName=\"li\">{`won’t`}</em>{` get the CSS `}<inlineCode parentName=\"li\">{`font-size: 3px;`}</inlineCode>{`. Instead, Theme UI will look up the third font size value in your theme.`}</li>\n      <li parentName=\"ul\">{`When you pass an array for a property like `}<inlineCode parentName=\"li\">{`fontSize`}</inlineCode>{`, you’re generating CSS Media Queries for responsive styling. `}<inlineCode parentName=\"li\">{`fontSize: [3, 4, 5]`}</inlineCode>{` means that on phones & screens larger than phones, the element will use the theme’s font size #3, then on tablets, theme value #4, then on laptops & larger, theme value #5. As you can see, for very little code, you can make a site that’s optimized for all screen sizes.`}</li>\n      <li parentName=\"ul\">{`You might notice weird properties that don’t correspond to standard CSS properties, like `}<inlineCode parentName=\"li\">{`my`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`mr`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`px`}</inlineCode>{`, etc. These are for margin & padding, using the theme `}<inlineCode parentName=\"li\">{`space`}</inlineCode>{` scale values just like how font size works. `}<inlineCode parentName=\"li\">{`mt`}</inlineCode>{` means `}<inlineCode parentName=\"li\">{`margin-top`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`mb`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`margin-bottom`}</inlineCode>{`, then `}<inlineCode parentName=\"li\">{`my`}</inlineCode>{` is margin on the Y axis, so both top & bottom (full set: `}<inlineCode parentName=\"li\">{`my mx my mr mb ml`}</inlineCode>{`). The same goes for padding, its properties beginning with `}<inlineCode parentName=\"li\">{`p`}</inlineCode>{` (full set: `}<inlineCode parentName=\"li\">{`py px pt pr pb pl`}</inlineCode>{`).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bg`}</inlineCode>{` sets the `}<inlineCode parentName=\"li\">{`background-color`}</inlineCode>{` to one of the `}<inlineCode parentName=\"li\">{`colors`}</inlineCode>{` in your theme. `}<inlineCode parentName=\"li\">{`color`}</inlineCode>{` sets the text color similarly. The superpower here is that if you enable dark mode or another theme, the colors dynamically change to that theme, as defined in your theme file.`}</li>\n      <li parentName=\"ul\">{`This is all processed by Theme UI, so `}<a parentName=\"li\" {...{\n          \"href\": \"https://theme-ui.com\"\n        }}>{`check our their website`}</a>{` for more details.`}</li>\n    </ul>\n    <p>{`I wrote a bit more about how styling is used at a component level `}<a parentName=\"p\" {...{\n        \"href\": \"https://notebook.lachlanjc.me/2019-08-15_hack_penn_site/\"\n      }}>{`over here about the Hack Pennsylvania site`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}